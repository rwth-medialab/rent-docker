"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 4.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

import locale
import os
from datetime import datetime, timedelta

import environ
from django.utils import timezone
from dotenv import load_dotenv

env = environ.Env()

from pathlib import Path

load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = str(os.environ.get('DJANGO_SECRET_KEY'))

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DEBUG', 'true') in ['true', 'True', '1']

ALLOWED_HOSTS = [str(os.environ.get('BACKEND_HOST'))]

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO',
    },
}

# Application definition

INSTALLED_APPS = [
    'api.apps.ApiConfig',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'knox',
    'base',
    'corsheaders',
    # cleans /media on deletion of database related files
    'django_cleanup.apps.CleanupConfig',
    'django_extensions',
    'django_celery_beat',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'corsheaders.middleware.CorsMiddleware',
]

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'knox.auth.TokenAuthentication',
    ],
    'EXCEPTION_HANDLER': 'api.views.integrity_error_exception_handler'

}

REST_KNOX = {
    'SECURE_HASH_ALGORITHM': 'cryptography.hazmat.primitives.hashes.SHA512',
    'AUTH_TOKEN_CHARACTER_LENGTH': 128,
    'TOKEN_TTL': timedelta(hours=24),
    'USER_SERIALIZER': 'knox.serializers.UserSerializer',
    'TOKEN_LIMIT_PER_USER': None,
    'AUTO_REFRESH': True,
}

ROOT_URLCONF = 'backend.urls'
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

OAUTH_CLIENTS = {
    'oauth': {
        'client_id': os.environ.get('OAUTH_CLIENT_ID'),
        'scope': os.environ.get('OAUTH_SCOPE'),
        'OAUTH_AUTHORIZATION_CODE_URL': os.environ.get('OAUTH_AUTHORIZATION_CODE_URL'),
        'OAUTH_ACCESS_TOKEN_URL': os.environ.get('OAUTH_ACCESS_TOKEN_URL'),
        'OAUTH_VERIFICATION_URL': os.environ.get('OAUTH_VERIFICATION_URL'),
        'OAUTH_VERIFICATIONDATA_ENDPOINT': os.environ.get('OAUTH_VERIFICATIONDATA_ENDPOINT'),
        'OAUTH_DATA_KEY': os.environ.get('OAUTH_DATA_KEY'),
        'OAUTH_DATA_VALUE': os.environ.get('OAUTH_DATA_VALUE')
    }
}

WSGI_APPLICATION = 'backend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

DATABASES = {
    'default': {
        # since constraints are used, postgres is mandatory
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.environ.get('POSTGRES_NAME'),
        'USER': os.environ.get('POSTGRES_USER'),
        'PASSWORD': os.environ.get('POSTGRES_PASSWORD'),
        'HOST': os.environ.get('POSTGRES_HOST'),
        'PORT': int(os.environ.get('POSTGRES_PORT')),  # type: ignore
        'ATOMIC_REQUESTS': True,
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'de'

TIME_ZONE = 'Europe/Berlin'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = '/django-static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

CORS_ALLOWED_ORIGINS = list(map(lambda x: x if (x.startswith('http://') or x.startswith(
    'https://')) else "https://"+x, str(os.environ.get('FRONTEND_HOST')).split(',')))
FRONTEND_HOST = str(os.environ.get('FRONTEND_HOST')) if str(os.environ.get(
    'FRONTEND_HOST')).endswith("/") else str(os.environ.get('FRONTEND_HOST'))+"/"

CSRF_TRUSTED_ORIGINS = str(os.environ.get('API_HOST')).split(',')
# Fix for django thinking connection is not secure and DRF providing http only links
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
EMAIL_VALIDATION_HASH_SALT = str(os.environ.get('EMAIL_VALIDATION_HASH_SALT'))

# EMAIL
EMAIL_TEST = str(os.environ.get('EMAIL_TEST')).lower() == 'true'
if EMAIL_TEST:
    EMAIL_HOST = 'mailpit'
    EMAIL_PORT = '1025'
else:
    EMAIL_HOST = str(os.environ.get('EMAIL_HOST'))
    EMAIL_PORT = str(os.environ.get('EMAIL_PORT'))
    EMAIL_USE_TLS = str(os.environ.get('EMAIL_USE_TLS')).lower() == "true"
    EMAIL_USE_SSL = str(os.environ.get('EMAIL_USE_SSL')).lower() == "true"

if (str(os.environ.get('EMAIL_REQUIRES_LOGIN')).lower() == 'true'):
    EMAIL_HOST_USER = str(os.environ.get('EMAIL_HOST_USER'))
    EMAIL_PASSWORD = str(os.environ.get('EMAIL_PASSWORD'))
DEFAULT_FROM_EMAIL = str(os.environ.get('DEFAULT_FROM_EMAIL'))
DEFAULT_NOTIFICATION_EMAIL = str(os.environ.get('DEFAULT_NOTIFICATION_EMAIL'))


# Settings for appointments
DEFAULT_LENTING_DAY_OF_WEEK = 4
DEFAULT_LENTING_START_HOUR = 12
DEFAULT_LENTING_END_HOUR = 16

DEFAULT_RETURNING_DAY_OF_WEEK = 4
DEFAULT_RETURNING_START_HOUR = 8
DEFAULT_RETURNING_END_HOUR = 12

# if diff exceeds a day the calculation is done somewhere else e.g. views.RentalObjectTypeViewSet.available
diff_in_days = 0
DEFAULT_OFFSET_BETWEEN_RENTALS = timedelta(days=diff_in_days)

EMAIL_VALIDATION_REGEX = '\\S+@([a-zA-Z0-9]+\\.)?rwth-aachen\\.de'

# celery broker and result
CELERY_BROKER_URL = os.environ.get("BROKER_URL", "redis://redis:6379/0")
CELERY_RESULT_BACKEND = os.environ.get(
    "RESULT_BACKEND", "redis://redis:6379/0")
